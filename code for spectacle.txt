##for spectacles
import cv2
import dlib


image = cv2.imread("lee.jpg",cv2.IMREAD_COLOR)

sunglasses = cv2.imread("glass2.png", cv2.IMREAD_UNCHANGED)


detector = dlib.get_frontal_face_detector()
predictor = dlib.shape_predictor("shape_predictor_68_face_landmarks.dat")  
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

# Detect faces in the grayscale image
faces = detector(gray,1)

# Iterate over the detected faces
for face in faces:
    # Estimate facial landmarks for the current face
    landmarks = predictor(gray, face)
    # Get the coordinates of relevant facial landmarks
    nose_tip = (landmarks.part(29).x, landmarks.part(29).y)
    left_ear = (landmarks.part(0).x, landmarks.part(0).y)
    
    right_ear = (landmarks.part(16).x, landmarks.part(16).y)
    left_eye = (landmarks.part(36).x, landmarks.part(36).y)
    right_eye = (landmarks.part(45).x, landmarks.part(45).y)

    # Calculate the dimensions of the sunglasses
    sunglass_width = right_ear[0] - left_ear[0]
    sunglass_height = int((sunglasses.shape[0] / sunglasses.shape[1]) * sunglass_width)

    # Resize the sunglasses image
    sunglasses_resized = cv2.resize(sunglasses, (sunglass_width, sunglass_height))

    # Calculate the position for placing the sunglasses
    x_offset = int(left_eye[0] - (sunglass_width * 0.18))
    y_offset = int(nose_tip[1] - (sunglass_height * 0.7))

    # Overlay the sunglasses on the image
    for c in range(0, 3):
        image[y_offset:y_offset+sunglass_height, x_offset:x_offset+sunglass_width, c] = \
            sunglasses_resized[:, :, c] * (sunglasses_resized[:, :, 3] / 255.0) + \
            image[y_offset:y_offset+sunglass_height, x_offset:x_offset+sunglass_width, c] * (1.0 - sunglasses_resized[:, :, 3] / 255.0)

# Display the resulting image
cv2.imshow('Sunglass Effect', image)
cv2.waitKey(0)

# Release resources
cv2.destroyAllWindows()










